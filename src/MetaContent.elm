-- Autogenerated by generate_metacontent.py
-- If only Elm had type classes...

module MetaContent exposing (..) 

import Html
import MyCss
import Option exposing (Option)

import Content.Button as Button
import Content.Term as Term


-- MODEL

type MultiModel
    = MdlButton Button.Model
    | MdlTerm Term.Model

menuOptions: MultiModel -> List (Option MultiMsg)
menuOptions multiModel =
    case multiModel of
        MdlButton model ->
            Button.menuOptions
            |> List.map (Option.map MsgButton)
        MdlTerm model ->
            Term.menuOptions
            |> List.map (Option.map MsgTerm)


-- UPDATE

type MultiMsg
    = MsgButton Button.Msg
    | MsgTerm Term.Msg

mismatchError: String
mismatchError = "MetaContent.update msg model type mismatch"

update: MultiMsg -> MultiModel -> Maybe (MultiModel, Cmd MultiMsg)
update multiMsg multiModel =
    case multiMsg of
        MsgButton action ->
            case multiModel of
                MdlButton model ->
                    let
                        (model_, cmd) = Button.update action model
                    in
                        Just (MdlButton model_, Cmd.map MsgButton cmd)
                _ ->
                    Debug.log mismatchError Nothing
        MsgTerm action ->
            case multiModel of
                MdlTerm model ->
                    let
                        (model_, cmd) = Term.update action model
                    in
                        Just (MdlTerm model_, Cmd.map MsgTerm cmd)
                _ ->
                    Debug.log mismatchError Nothing


-- VIEW

{-  It's important to differentiate the part of the Content's view that are
    inside or outside of the Node (that's what the view names refer to). This
    is because the inside part will have to react to the Node's mouse events
    (like clicking the title and dragging should work), but the outside parts
    (the things that 'pop out' of the content) shouldn't.
-}

viewInside: MultiModel -> Html.Html MultiMsg
viewInside multiModel =
    case multiModel of
        MdlButton model ->
            Button.viewInside model
            |> Html.map MsgButton
        MdlTerm model ->
            Term.viewInside model
            |> Html.map MsgTerm

viewOutside: MultiModel -> Html.Html MultiMsg
viewOutside multiModel =
    case multiModel of
        MdlButton model ->
            Button.viewOutside model
            |> Html.map MsgButton
        MdlTerm model ->
            Term.viewOutside model
            |> Html.map MsgTerm


-- SUBSCRIPTIONS

subscriptions : MultiModel -> Sub MultiMsg
subscriptions multiModel =
    case multiModel of
        MdlButton model ->
            Button.subscriptions model
                |> Sub.map MsgButton
        MdlTerm model ->
            Term.subscriptions model
                |> Sub.map MsgTerm
