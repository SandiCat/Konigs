-- Autogenerated by generate_metacontent.py
-- If only Elm had type classes...

module MetaContent where

import ContentUtil
import Signal
import Debug
import Svg
import Effects exposing (Effects)

import Content.Button as Button
import Content.Term as Term


-- MODEL

type MultiModel
    = MButton Button.Model
    | MTerm Term.Model


-- UPDATE

type MultiAction
    = AButton Button.Action
    | ATerm Term.Action

mismatchError: String
mismatchError = "MetaContent.update action model type mismatch"

update: MultiAction -> MultiModel -> (MultiModel, Effects MultiAction)
update multiAction multiModel =
    case multiAction of
        AButton action ->
            case multiModel of
                MButton model ->
                    let
                        (model', fx) = Button.update action model
                    in
                        (MButton model', Effects.map AButton fx)
                otherwise ->
                    Debug.crash mismatchError
        ATerm action ->
            case multiModel of
                MTerm model ->
                    let
                        (model', fx) = Term.update action model
                    in
                        (MTerm model', Effects.map ATerm fx)
                otherwise ->
                    Debug.crash mismatchError


-- VIEW

view: ContentUtil.ViewContext MultiAction -> MultiModel -> Svg.Svg
view context multiModel =
    case multiModel of
        MButton model ->
            Button.view
                { context | actions = Signal.forwardTo context.actions AButton }
                model
        MTerm model ->
            Term.view
                { context | actions = Signal.forwardTo context.actions ATerm }
                model